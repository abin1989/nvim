source go.vim

snippet     abin
abbr        package main\nimport fmt...
alias yubin
options     head
  hello abin

snippet     println()
abbr        println(...)
alias pr
options     head
  println(${0})

snippet     spew.Dump
abbr        spew.Dump(...)
alias sd
options     head
  spew.Dump(${0})

snippet     fmterr
abbr        err = fmt.Errorf("%w:%s",...)
alias frr
options     head
  err = fmt.Errorf("%w:%s",${1},${0})

snippet     ranges
abbr        for k, v := range slice{}
alias rs
options     head
  for ${2:k},${3:v} := range ${1:slice} {
        ${0}
  }

snippet     logfatal
abbr        log.Fatalln(...)
alias lf
options     head
  log.WithFields(log.Fields{
          "${2}": ${3},
  }).Fatalln("${1}")

snippet     logwarning
abbr        log.Warning(...)
alias lw
options     head
  log.WithFields(log.Fields{
          "${2}": ${3},
  }).Warningln("${1}")

snippet     logerror
abbr        log.Errorln(...)
alias le
options     head
  log.WithFields(log.Fields{
          "${2}": ${3},
  }).Errorln("${1}")

snippet     logdebug
abbr        log.Debugln(...)
alias ld
options     head
  log.WithFields(log.Fields{
          "${2}": ${3},
  }).Debugln("${1}")

snippet     loginfo
abbr        log.Infoln(...)
alias li
options     head
  log.WithFields(log.Fields{
          "${2}": ${3},
  }).Infoln("${1}")

snippet     logpanic
abbr        log.Panicln(...)
alias lp
options     head
  log.WithFields(log.Fields{
          "${2}": ${3},
  }).Panicln("${1}")

snippet     rangem
abbr        for k, v := range map{}
alias rm
options     head
  for ${2:k},${3:v} := range ${1:map} {
        ${0}
  }

snippet     append
abbr        a = append(a ,val)
alias app
options     head
  ${1:slice} = append($1, ${2:val})
  ${0:TARGET}

snippet     func
abbr        func ...() { ... }
alias fn
options     head
  //$1 ${4:comment}
  func ${1:fname}(${2}) ${3:int }{
    ${0:TARGET:return }
  }

snippet     stfunc
abbr        func ...() { ... }
alias sf
options     head
  //${1:fname} ${4:comment}
  func (this *${5:structName})${1}(${2}) ${3:int }{
    ${0:TARGET:return }
  }

snippet     import
alias im
options     head
  import (
    "${1:fmt}"
  )
  ${0:TARGET}

snippet     package
alias pk
options     head
  package ${1:main}
  ${0:TARGET}

snippet     struct
alias st
options     head
  //$1 ${2:comment}
  type ${1:name} struct {
    ${0:TARGET}
  }

snippet     interface
alias ti
options     head
  type ${1} interface {
    ${0:TARGET}
  }

snippet     for
options     head
  for ${1} {
    ${0:TARGET}
  }

snippet     iferrp
alias       ifp
options     head
    if err != nil {
        panic(err)
    }

snippet     iferr
alias       ife
options     head
    if err != nil {
      return `g:NeosnippetSnippets_Goiferr()`
    }
    ${2}

snippet     switch
alias       sw
abbr        switch {}
options     head
  switch ${1:#:v} {
  case ${2:#:condition}:
    ${0:TARGET}
  }

snippet     select
abbr        select {}
options     head
  select {
  case ${1:#:condition}:
    ${0:TARGET}
  }

snippet     case
options     head
  case ${1:#:condition}:
    ${2:TARGET}

snippet     funcTest
alias       ft
abbr        func Test... (t *testing.T) { ... }
options     head
  func Test${1} (t *testing.T) {
    ${0:TARGET}
  }

snippet     funcbench
abbr        func Benchmark... (b *testing.B) { ... }
options     head
  func Benchmark${1} (${2:b *testing.B}) {
    for i := 0; i < ${3:b.N}; i++ {
      ${4}
    }
  }

snippet     testtable
abbr        var test = {...}{...} for {t.Run(){...}}
options     head
  var tests = []struct {
      name string
      expected string
      given string
  }{
      {"${2}", "${3}", "${4}",},
  }
  for _, tt := range tests {
      tt := tt
      t.Run(tt.name, func(t *testing.T){
          actual := ${1:Function}(tt.given)
          if actual != tt.expected {
              t.Errorf("given(%s): expected %s, actual %s", tt.given, tt.expected, actual)
          }
      })
  }
